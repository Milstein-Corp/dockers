version: '2.3'
services:

  # Main Web UI
  apache2: 
    image: httpd:latest
    container_name: apache2
    mem_limit: 2048m
    restart: always
    volumes:
      - ./apache2/htdocs:/usr/local/apache2/htdocs
    ports:
      - 80:80
    networks:
      - devops-network

  ##########
  # gitlab #
  ##########
  gitlab:
    image: gitlab/gitlab-ce:$GITLAB_VERSION
    container_name: gitlab
    mem_limit: 2048m
    restart: always
    hostname: 'gitlab'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.example.com'
    ports:
      - 8081:80
      - 443:443
      - 24:22
    volumes:
      - ./storeddata/gitlab/config:/etc/gitlab
      - ./storeddata/gitlab/logs:/var/log/gitlab
      - ./storeddata/gitlab/data:/var/opt/gitlab
    logging:
      driver: "json-file"
      options:
          max-size: "10m"
          max-file: "5"
    networks:
      - devops-network 

  ###########
  # jenkins #
  ###########
  jenkins:
    image: jenkins/jenkins:$JENKINS_VERSION
    container_name: jenkins
    mem_limit: 2048m
    restart: always
    ports:
      - 8083:8080
      - 444:443
      - 50000:50000 #build executors port
    volumes:
      - ./storeddata/jenkins_home:/var/jenkins_home
    environment:
      JAVA_OPTS: "-Djava.awt.headless=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - devops-network

  ###########
  # jupyter #
  ###########
  datascience-notebook:
    image: jupyter/datascience-notebook:$JUPYTER_VERSION
    container_name: datascience-notebook
    hostname: datascience-notebook
    mem_limit: 2048m
    restart: always
    ports:
      - 8084:8888
    volumes:
      - ./storeddata/jupyter/work:/home/jovyan/work
      - /var/run/docker.sock:/var/run/docker.sock
    user: root
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - GRANT_SUDO=yes
    command: "start-notebook.sh --NotebookApp.password='sha1:1b05173510a1:64b02e937a1ef0d15930d8f0d3f1e94b04a1f8c7'" #Password1234!
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - devops-network

  ################
  # elasticstack #
  ################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:$ELK_VERSION
    container_name: elasticsearch
    volumes:
      - type: bind
        source: ./elasticsearch/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    logging:
      driver: "json-file"
      options:
          max-size: "10m"
          max-file: "5"
    networks:
      - devops-network

  kibana:
    image: docker.elastic.co/kibana/kibana:$ELK_VERSION
    container_name: kibana
    volumes:
      - type: bind
        source: ./kibana/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - 8085:5601
    logging:
      driver: "json-file"
      options:
          max-size: "10m"
          max-file: "5"
    networks:
      - devops-network
    depends_on:
      - elasticsearch

  ##########
  # nexus3 #
  ##########
  nexus3:
    image: sonatype/nexus3:$NEXUS3_VERSION
    container_name: nexus3
    mem_limit: 2048m
    restart: always
    ports:
      - 8086:8081
    volumes:
      - ./storeddata/nexus-data:/nexus-data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - devops-network

  #############
  # sonarqube #
  #############
  sonarqube:               
    image: sonarqube:$SONARQUBE_VERSION
    container_name: sonarqube
    hostname: sonarqube
    mem_limit: 2048m
    ports:      
      - 8087:9000
    restart: always
    environment:
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=Password1234!
      - SONARQUBE_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
    volumes:
      - ./storeddata/sonarqube/sonarqube_conf:/opt/sonarqube/conf
      - ./storeddata/sonarqube/sonarqube_data:/opt/sonarqube/data
      - ./storeddata/sonarqube/sonarqube_extensions:/opt/sonarqube/extensions
      - ./storeddata/sonarqube/sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - devops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:$POSTGRES_VERSION
    container_name: postgres
    hostname: postgres
    mem_limit: 2048m
    restart: always
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=Password1234!
    volumes:
      - ./storeddata/postgresql/postgresql:/var/lib/postgresql
      - ./storeddata/postgresql/postgresql_data:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
          max-size: "10m"
          max-file: "5"
    networks:
      - devops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  devops-network:
    driver: bridge

volumes:
  elasticsearch:
